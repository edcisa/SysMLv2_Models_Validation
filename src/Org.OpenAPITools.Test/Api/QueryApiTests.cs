/*
 * SysML v2 API and Services
 *
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing QueryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class QueryApiTests : IDisposable
    {
        private QueryApi instance;

        public QueryApiTests()
        {
            instance = new QueryApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of QueryApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' QueryApi
            //Assert.IsType<QueryApi>(instance);
        }

        /// <summary>
        /// Test DeleteQueryByProjectAndId
        /// </summary>
        [Fact]
        public void DeleteQueryByProjectAndIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //Guid queryId = null;
            //var response = instance.DeleteQueryByProjectAndId(projectId, queryId);
            //Assert.IsType<Query>(response);
        }

        /// <summary>
        /// Test GetQueriesByProject
        /// </summary>
        [Fact]
        public void GetQueriesByProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //string pageAfter = null;
            //string pageBefore = null;
            //int? pageSize = null;
            //var response = instance.GetQueriesByProject(projectId, pageAfter, pageBefore, pageSize);
            //Assert.IsType<List<Query>>(response);
        }

        /// <summary>
        /// Test GetQueryByProjectAndId
        /// </summary>
        [Fact]
        public void GetQueryByProjectAndIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //Guid queryId = null;
            //var response = instance.GetQueryByProjectAndId(projectId, queryId);
            //Assert.IsType<Query>(response);
        }

        /// <summary>
        /// Test GetQueryResultsByProjectIdQuery
        /// </summary>
        [Fact]
        public void GetQueryResultsByProjectIdQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //Query body = null;
            //Guid? commitId = null;
            //var response = instance.GetQueryResultsByProjectIdQuery(projectId, body, commitId);
            //Assert.IsType<List<Element>>(response);
        }

        /// <summary>
        /// Test GetQueryResultsByProjectIdQueryId
        /// </summary>
        [Fact]
        public void GetQueryResultsByProjectIdQueryIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //Guid queryId = null;
            //Guid? commitId = null;
            //var response = instance.GetQueryResultsByProjectIdQueryId(projectId, queryId, commitId);
            //Assert.IsType<List<Element>>(response);
        }

        /// <summary>
        /// Test GetQueryResultsByProjectIdQueryPost
        /// </summary>
        [Fact]
        public void GetQueryResultsByProjectIdQueryPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //Query body = null;
            //Guid? commitId = null;
            //var response = instance.GetQueryResultsByProjectIdQueryPost(projectId, body, commitId);
            //Assert.IsType<List<Element>>(response);
        }

        /// <summary>
        /// Test PostQueryByProject
        /// </summary>
        [Fact]
        public void PostQueryByProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //Query body = null;
            //var response = instance.PostQueryByProject(projectId, body);
            //Assert.IsType<Query>(response);
        }
    }
}
