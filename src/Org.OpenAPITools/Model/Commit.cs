/*
 * SysML v2 API and Services
 *
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Commit
    /// </summary>
    [DataContract(Name = "Commit")]
    public partial class Commit : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Commit for value: Commit
            /// </summary>
            [EnumMember(Value = "Commit")]
            Commit = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Commit" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="change">change.</param>
        /// <param name="owningProject">owningProject.</param>
        /// <param name="previousCommit">previousCommit.</param>
        public Commit(Guid id = default(Guid), TypeEnum? type = default(TypeEnum?), List<DataVersion> change = default(List<DataVersion>), BranchOwningProject owningProject = default(BranchOwningProject), BranchHead previousCommit = default(BranchHead))
        {
            this.Id = id;
            this.Type = type;
            this.Change = change;
            this.OwningProject = owningProject;
            this.PreviousCommit = previousCommit;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "@id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Change
        /// </summary>
        [DataMember(Name = "change", EmitDefaultValue = false)]
        public List<DataVersion> Change { get; set; }

        /// <summary>
        /// Gets or Sets OwningProject
        /// </summary>
        [DataMember(Name = "owningProject", EmitDefaultValue = false)]
        public BranchOwningProject OwningProject { get; set; }

        /// <summary>
        /// Gets or Sets PreviousCommit
        /// </summary>
        [DataMember(Name = "previousCommit", EmitDefaultValue = false)]
        public BranchHead PreviousCommit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Commit {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  OwningProject: ").Append(OwningProject).Append("\n");
            sb.Append("  PreviousCommit: ").Append(PreviousCommit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
