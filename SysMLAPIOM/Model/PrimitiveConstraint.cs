/*
 * SysML v2 API and Services
 *
 * REST/HTTP binding (PSM) for the SysML v2 standard API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PrimitiveConstraint
    /// </summary>
    [DataContract(Name = "PrimitiveConstraint")]
    public partial class PrimitiveConstraint : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PrimitiveConstraint for value: PrimitiveConstraint
            /// </summary>
            [EnumMember(Value = "PrimitiveConstraint")]
            PrimitiveConstraint = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "@type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum Equal for value: &#x3D;
            /// </summary>
            [EnumMember(Value = "=")]
            Equal = 1,

            /// <summary>
            /// Enum GreaterThan for value: &gt;
            /// </summary>
            [EnumMember(Value = ">")]
            GreaterThan = 2,

            /// <summary>
            /// Enum LessThan for value: &lt;
            /// </summary>
            [EnumMember(Value = "<")]
            LessThan = 3
        }


        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public OperatorEnum? Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrimitiveConstraint" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="inverse">inverse.</param>
        /// <param name="property">property.</param>
        /// <param name="value">value.</param>
        /// <param name="varOperator">varOperator.</param>
        public PrimitiveConstraint(TypeEnum? type = default(TypeEnum?), bool inverse = default(bool), string property = default(string), string value = default(string), OperatorEnum? varOperator = default(OperatorEnum?))
        {
            this.Type = type;
            this.Inverse = inverse;
            this.Property = property;
            this.Value = value;
            this.Operator = varOperator;
        }

        /// <summary>
        /// Gets or Sets Inverse
        /// </summary>
        [DataMember(Name = "inverse", EmitDefaultValue = true)]
        public bool Inverse { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name = "property", EmitDefaultValue = false)]
        public string Property { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrimitiveConstraint {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Inverse: ").Append(Inverse).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
